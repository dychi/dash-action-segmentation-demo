<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Document for dash-segmentation demo app</title>
    <link>https://dychi.github.io/dash-action-segmentation-demo/</link>
    <description>Recent content on Document for dash-segmentation demo app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 28 Jan 2019 23:08:57 +0900</lastBuildDate>
    
	<atom:link href="https://dychi.github.io/dash-action-segmentation-demo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Requirements</title>
      <link>https://dychi.github.io/dash-action-segmentation-demo/basics/requirements/</link>
      <pubDate>Thu, 31 Jan 2019 17:35:22 +0900</pubDate>
      
      <guid>https://dychi.github.io/dash-action-segmentation-demo/basics/requirements/</guid>
      <description> 必要なもの certifi==2018.11.29 chardet==3.0.4 Click==7.0 dash==0.32.2 dash-core-components==0.40.3 dash-html-components==0.13.2 dash-renderer==0.16.0 dash-table==3.1.11 decorator==4.3.0 Flask==1.0.2 Flask-Compress==1.4.0 gunicorn==19.9.0 idna==2.8 ipython-genutils==0.2.0 itsdangerous==1.1.0 Jinja2==2.10 jsonschema==2.6.0 jupyter-core==4.4.0 MarkupSafe==1.1.0 nbformat==4.4.0 numpy==1.15.4 pandas==0.23.4 plotly==3.4.2 python-dateutil==2.7.5 pytz==2018.7 requests==2.21.0 retrying==1.3.3 six==1.12.0 traitlets==4.3.2 urllib3==1.24.1 Werkzeug==0.14.1  </description>
    </item>
    
    <item>
      <title>Directories</title>
      <link>https://dychi.github.io/dash-action-segmentation-demo/basics/directories/</link>
      <pubDate>Thu, 31 Jan 2019 17:38:11 +0900</pubDate>
      
      <guid>https://dychi.github.io/dash-action-segmentation-demo/basics/directories/</guid>
      <description> ディレクトリ構造 . ├── README.md ├── app.py ├── annotations │ ├── match_7.csv │ ├── match_8.csv │ ├── match_9.csv │ ├── match_10.csv ├── imgaes │ ├── match_7/ │ ├── match_8/ │ ├── match_9/ │ ├── match_10/ ├── requirements.txt ├── flex.app.yaml └── standard.app.yaml  </description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>https://dychi.github.io/dash-action-segmentation-demo/basics/anno/</link>
      <pubDate>Thu, 31 Jan 2019 18:08:10 +0900</pubDate>
      
      <guid>https://dychi.github.io/dash-action-segmentation-demo/basics/anno/</guid>
      <description>読み込むcsvファイルの形式 予測結果と正解データを表示するためのcsvファイルのデータの例を示します。
   Top1_score Frames class_str_label class_str_top1 n smpt smpb rtpt rtpb bhpt bhpb fhpt fhpb lbpt lbpb spt spb     0.5331301093101501 img_009549.jpg spb spb 0.090465754 9.656445e-05 0.001097708 0.03143407 0.004162653 0.00018237281 0.00044826482 4.8154732e-05 2.5673266e-05 0.0032581198 0.0016761322 0.3339744 0.5331301   0.5481389164924622 img_009550.jpg spb spb 0.089183785 2.7546675e-05 0.0006168233 0.017062714 0.0027068239 7.7470446e-05 0.0004935579 1.8993607e-05 2.2912322e-05 0.0016966339 0.001952591 0.3380012 0.5481389   0.5484710931777954 img_009551.jpg spb spb 0.07672995 2.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://dychi.github.io/dash-action-segmentation-demo/basics/reference/</link>
      <pubDate>Thu, 31 Jan 2019 17:42:19 +0900</pubDate>
      
      <guid>https://dychi.github.io/dash-action-segmentation-demo/basics/reference/</guid>
      <description> 参考にしたサイト  Dash Object Detection Explorer: 作成したデモの原型となるページ Dash recipes: Plotlyでの色んなグラフの書き方やDashの使い方について学べます。  </description>
    </item>
    
    <item>
      <title>Static File</title>
      <link>https://dychi.github.io/dash-action-segmentation-demo/content/staticfile/</link>
      <pubDate>Thu, 31 Jan 2019 19:53:09 +0900</pubDate>
      
      <guid>https://dychi.github.io/dash-action-segmentation-demo/content/staticfile/</guid>
      <description>Static File HTMLファイルや画像ファイルなど，クライアントからの要求に対する応答に使用するファイルのうち、リクエスト内容に影響されないで常に同じ内容になるコンテンツを、静的コンテンツといいます。
Dashは動的にサイトを生成しますが、画像などの静的ファイルを表示するには画像ファイルへのパスを明示してやる必要があります。
# Static Path to images STATIC_PATH = os.path.join(os.getcwd(), &#39;images/&#39;)  指定した静的ファイルのディレクトリから相対パスで画像を読み込むためには、Flaskのsend_file()を使用してrootディレクトリからのパスを返します。
# Images Display @app.callback(Output(&amp;quot;images&amp;quot;, &amp;quot;src&amp;quot;), [Input(&amp;quot;slider-frame-position&amp;quot;, &amp;quot;value&amp;quot;)], [State(&amp;quot;dropdown-video-selection&amp;quot;, &amp;quot;value&amp;quot;)]) def update_image_src(frame, video): video_df = data_dict[video][&amp;quot;video_info_df&amp;quot;] frame_name = video_df[&amp;quot;Frames&amp;quot;][frame] return url_dict[video] + frame_name @app.server.route(&#39;{}&amp;lt;path:image_path&amp;gt;.jpg&#39;.format(STATIC_PATH)) def serve_image(image_path): img_name = &#39;{}.jpg&#39;.format(image_path) return flask.send_file(STATIC_PATH + img_name)  こうすることで、id=&amp;ldquo;images&amp;rdquo;のsrcを更新して画像を表示することが出来ます。
その他にもsend_from_directory()などを使用することも出来ます。</description>
    </item>
    
    <item>
      <title>Callback</title>
      <link>https://dychi.github.io/dash-action-segmentation-demo/content/callback/</link>
      <pubDate>Thu, 31 Jan 2019 19:32:49 +0900</pubDate>
      
      <guid>https://dychi.github.io/dash-action-segmentation-demo/content/callback/</guid>
      <description>Callback callbackは作成したグラフをインタラクティブに描画するために使います。
# Update Correct Label @app.callback(Output(&amp;quot;correct-label&amp;quot;, &amp;quot;children&amp;quot;), [Input(&amp;quot;slider-frame-position&amp;quot;, &amp;quot;value&amp;quot;)], [State(&amp;quot;dropdown-video-selection&amp;quot;, &amp;quot;value&amp;quot;)]) def update_label(frame, video): label = data_dict[video][&amp;quot;video_info_df&amp;quot;][&amp;quot;class_str_label&amp;quot;][frame] return &#39;Correct Label is &amp;quot;{}&amp;quot;&#39;.format(rename_dict[label].replace(&#39;&amp;lt;br&amp;gt;&#39;, &#39;&#39;))  ここでは、app.pyのupdate_visual関数の中で作成したhtml.H4で指定している id=&amp;ldquo;correct-label&amp;rdquo; のchildren要素を更新することを示しています。
インタラクティブに変更する際には入力と状態を定義する必要があり、Input, Stateをupdate_label関数の引数とします。
その引数に対して、H4の Correct Label is {} の{}を更新することになります。
このようにしてそれぞれのグラフでの値を変更していきます。</description>
    </item>
    
  </channel>
</rss>